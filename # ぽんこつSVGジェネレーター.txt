# ぽんこつSVGジェネレーター

## プロジェクト概要:

これは「ぽんこつSVGジェネレーター」開発の第一歩となるPoC（概念実証）プロジェクトです。フル機能版への足がかりとして、**「長方形の描画」と「SVGエクスポート」**という最も基本的な機能のみを実装します。編集や色の変更といった複雑な機能は、この段階では一切含めません。

## 技術スタック:

- フロントエンド: React, SVG.js
- バックエンド: Node.js, Express.js
- ビルドツール: Vite
- 状態管理: React標準の `useState` フックのみを使用します。( `Zustand` のような外部ライブラリは不要です)

## 機能要件:

1. 画面構成

画面は以下の3つの要素だけで構成してください。

- キャンバス領域: 画面の大部分を占める、描画エリアです。
- エクスポートボタン: キャンバスの現在の内容をSVGファイルとしてダウンロードします。
- クリアボタン: キャンバスに描画した内容をすべて消去します。

2. コア機能

- 長方形の描画
  - ユーザーがキャンバス上でマウスをドラッグすると、その軌跡に合わせて長方形が一つ描画されます。
  - 描画される長方形のスタイルは、**黒い枠線（ `stroke="black"` ）、塗りは無し（ `fill="none"` ）** で固定します。
  - 描画した長方形は、画面上に追加され続けます。
- 状態管理
  - 描画された全ての長方形のデータ（例: {x, y, width, height} の配列）を、Reactの useState を使って管理してください。
- SVGエクスポート
  - 「エクスポート」ボタンをクリックすると、現在Stateで管理している全ての長方形データをもとにSVG形式のファイル (.svg) が生成され、ブラウザからダウンロードされるようにしてください。

## 実装ステップの提案:

Jules、以下のステップで実装を進めてください。

1.環境構築: Viteで基本的なReactプロジェクトを作成し、SVG.jsをインストールします。
2.UI配置:
  - `App.tsx` に、SVGキャンバス領域となる `<svg>` タグと、「エクスポート」「クリア」の2つの `<button>` を配置します。
3. State定義:
 - 描画された長方形のリストを保持するためのStateを `useState([])` を使って定義します。
4.描画ロジック:
 - キャンバス領域で `onMouseDown` , `onMouseMove` , `onMouseUp` の各イベントを捕捉します。
 - ドラッグ開始時に長方形の始点を記録し、ドラッグ終了時にその座標とサイズを確定させ、Stateの配列に新しい長方形オブジェクトを追加します。
 - Stateの配列を `.map()` でループ処理し、配列の要素数だけSVGの `<rect>` 要素を描画します。
5.機能実装:
 - 「クリア」ボタンが押されたら、Stateの配列を空にしてください。
 - 「エクスポート」ボタンが押されたら、Stateの配列からSVGファイルの文字列全体を組み立て、ダウンロードさせる処理を実装してください。

